// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  password   String
  role       String   @default("USER") // USER, ADMIN
  cpf        String?  // CPF do usuário
  phone      String?  // Telefone do usuário
  birthDate  String?  // Data de nascimento (formatada como string)
  profileCompleted Boolean @default(false) // Indica se o perfil foi completado
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart      Cart?
  orders    Order[]
  reviews   Review[]
  favorites Favorite[]
  auditLogs AuditLog[]

  @@map("users")
}

model Category {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  parentId String?
  parent   Category? @relation("CategoryTree", fields: [parentId], references: [id])
  children Category[] @relation("CategoryTree")

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  images      String   // JSON array de URLs
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  stock       Int      @default(0)
  rating      Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews     Review[]
  favorites   Favorite[]
  orderItems  OrderItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     String   // JSON array de CartItem
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Order {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  items      String   // JSON array de OrderItem
  total      Float
  status     String   @default("PENDING")
  paymentId  String?
  address    String   // JSON do endereço
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("favorites")
}

model SecurityLog {
  id          String   @id @default(cuid())
  level       String   // INFO, WARNING, ERROR, SECURITY_ALERT
  message     String
  ip          String?
  userAgent   String?
  userId      String?
  endpoint    String?
  method      String?
  statusCode  Int?
  details     String?  // JSON com detalhes adicionais
  createdAt   DateTime @default(now())

  @@map("security_logs")
  @@index([createdAt])
  @@index([level])
  @@index([ip])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  action      String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  entityType  String   // PRODUCT, USER, ORDER, etc.
  entityId    String?
  description String
  ip          String?
  userAgent   String?
  changes     String?  // JSON com mudanças (before/after)
  createdAt   DateTime @default(now())

  @@map("audit_logs")
  @@index([userId])
  @@index([createdAt])
  @@index([action])
  @@index([entityType])
}

model SecurityEvent {
  id          String   @id @default(cuid())
  eventType   String   // SQL_INJECTION, XSS, BRUTE_FORCE, SUSPICIOUS_REQUEST, etc.
  severity    String   // LOW, MEDIUM, HIGH, CRITICAL
  ip          String
  userAgent   String?
  endpoint    String
  method      String
  payload     String?  // JSON com dados da requisição
  blocked     Boolean  @default(false)
  description String
  createdAt   DateTime @default(now())

  @@map("security_events")
  @@index([createdAt])
  @@index([eventType])
  @@index([severity])
  @@index([ip])
  @@index([blocked])
}

